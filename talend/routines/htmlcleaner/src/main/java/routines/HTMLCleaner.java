package routines;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.WordUtils;

public class HTMLCleaner {
	private static final Pattern spanPattern = Pattern.compile("<\\s*SPAN\\s+STYLE\\s*=\\s*\\\"(.*?)\"\\s*>(.*?)</SPAN>");
	
	/**
	 * Cleans up HTML generated by FileMaker.
	 *
	 * {talendTypes} String
	 *
	 * {Category} HTML Cleaner
	 *
	 * {param} string("html") input: The HTML to clean up.
	 *
	 * {example} cleanHTML("<span style='font-weight: bold'>Hello world</span>") # <b>Hello world</b>
	 */
	public static String cleanHTML(String html) {
		String cleanedHtml = "";
		int lastMatchEnd = 0;
		
		Matcher matcher = spanPattern.matcher(html);
		
		while (matcher.find()) {
			int matchStart = matcher.start();
			int matchEnd = matcher.end();
			
			cleanedHtml += html.substring(lastMatchEnd, matchStart);
			
			String styles = matcher.group(1);
			String content = matcher.group(2);
			
			cleanedHtml = cleanedHtml + applyStyles(styles, content, cleanedHtml);
					
			lastMatchEnd = matchEnd;
		}

		cleanedHtml += html.substring(lastMatchEnd);
		
		return cleanedHtml;
	}
	
	private static String applyStyles(String styles, String content, String precedingContent) {
		Map<String, String> styleMap = new HashMap<String, String>();

		if (styles.length() > 0) {
			String[] pairs = styles.split(";");
	
			for (String pair : pairs) {
				String[] parts = pair.split(":");
				
				String key = StringUtils.trim(parts[0]).toLowerCase();
				String value = StringUtils.trim(parts[1]).toLowerCase();
				
				if (styleMap.containsKey(key)) {
					throw new RuntimeException("unexpected duplicate style: " + key);
				}
	
				styleMap.put(key, value);
			}
		}

		List<String> tags = new ArrayList<String>();
		
		for (String key : styleMap.keySet()) {
			String value = styleMap.get(key);
			
			if (key.equals("font-family")) {
				// Ignore
			}
			else if (key.equals("font-size")) {
				// Ignore
			}
			else if (key.equals("font-style")) {
				if (value.equals("italic")) {
					tags.add("i");
				}
				else if (value.equals("normal")) {
					// Ignore
				}
				else {
					throw new RuntimeException("unexpected value for " + key + ": " + value);
				}
			}
			else if (key.equals("font-variant")) {
				if (value.equals("normal")) {
					// Ignore
				}
				else {
					throw new RuntimeException("unexpected value for " + key + ": " + value);
				}
			}
			else if (key.equals("font-weight")) {
				if (value.equals("bold")) {
					tags.add("b");
				}
				else if (value.equals("normal")) {
					// Ignore
				}
				else {
					throw new RuntimeException("unexpected value for " + key + ": " + value);
				}
			}
			else if (key.equals("letter-spacing")) {
				if (value.equals("normal")) {
					// Ignore
				}
				else {
					throw new RuntimeException("unexpected value for " + key + ": " + value);
				}
				
			}
			else if (key.equals("text-decoration")) {
				if (value.equals("underline")) {
					tags.add("u");
				}
				else if (value.equals("none")) {
					// Ignore
				}
				else {
					throw new RuntimeException("unexpected value for " + key + ": " + value);
				}				
			}
			else if (key.equals("text-transform")) {
				if (value.equals("capitalize")) {
					// Capitalize first letter of each word, lowercase the rest.
					
					content = WordUtils.capitalizeFully(content);
				
					if (precedingContent.length() > 0) {
						String endOfPrecedingContent = StringUtils.right(precedingContent, 1);
						
						if (endOfPrecedingContent.matches("[A-Za-z]")) {
							// This span wasn't the start of a word, so lowercase the first letter.
							
							content = StringUtils.uncapitalize(content);
						}
						else if (!endOfPrecedingContent.equals(" ")) {
							// Uh oh, don't know how to handle this.
							
							throw new RuntimeException("unexpected character before capitalized text: " + endOfPrecedingContent);
						}
					}
				}
				else if (value.equals("uppercase")) {
					content = content.toUpperCase();
				}
				else if (value.equals("none")) {
					// Ignore
				}
				else {
					throw new RuntimeException("unexpected value for " + key + ": " + value);
				}				
			}
			else if (key.equals("vertical-align")) {
				if (value.equals("text-top")) {
					tags.add("sup");
				}
				else {
					throw new RuntimeException("unexpected value for " + key + ": " + value);
				}
			}
			else {
				throw new RuntimeException("unexpected style: " + key);
			}
		}

		if (tags.size() > 1) {
			throw new RuntimeException("found multiple tags");
		}
		
		String markup;
		
		if (tags.size() > 0) {
			String tag = tags.get(0);
			
			markup = openTag(tag) + content + closeTag(tag);			
		}
		else {
			markup = content;
		}
		
		return markup;
	}
	
	private static String openTag(String name) {
		return "<" + name + ">";
	}
	
	private static String closeTag(String name) {
		return "</" + name + ">";
	}

//	public static void main(String[] args) {
//		System.out.println(cleanHTML(
//			"<SPAN STYLE= \"font-size: 12px;font-weight: normal;font-style:normal;text-decoration:none;font-variant:normal;letter-spacing: normal;text-transform: capitalize;\" >Mc</SPAN><SPAN STYLE= \"font-size: 12px;font-weight: normal;font-style:normal;text-decoration:none;font-variant:normal;letter-spacing: normal;text-transform: uppercase;\" >M</SPAN><SPAN STYLE= \"font-size: 12px;font-weight: normal;font-style:normal;text-decoration:none;font-variant:normal;letter-spacing: normal;text-transform: capitalize;\" >anus Faulkner and Morgan</SPAN>"
//		));
//	}
	
	public static void main(String[] args) {
		BufferedReader in = null;

		if (args.length > 0) {
			String filename = args[0];

			try {
				in = new BufferedReader(new FileReader(filename));
			} catch (FileNotFoundException e) {
				System.err.println("File not found: " + filename);
			}
		}
		else {
			in = new BufferedReader(new InputStreamReader(System.in));
		}

		if (in == null) {
			return;
		}

		try {
			for(String line; (line = in.readLine()) != null; ) {
				String[] parts = line.split("\\t");
				
				if (parts.length > 3) {
					String html = parts[3];
					
					System.out.println(cleanHTML(html));
				}
			}
		}
		catch(IOException e) {
			System.err.println("Error reading file: " + e.getLocalizedMessage());
		}

		try {
			in.close();
		}
		catch(IOException e) {
			System.err.println("Error closing file: " + e.getLocalizedMessage());
		}
	}
}
